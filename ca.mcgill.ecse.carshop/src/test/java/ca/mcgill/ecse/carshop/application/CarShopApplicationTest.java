/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ca.mcgill.ecse.carshop.application;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.junit.Assert.assertTrue;

import java.io.File;
import java.sql.Date;
import java.sql.Time;

import org.junit.jupiter.api.BeforeAll;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;

import ca.mcgill.ecse.carshop.model.Appointment;
import ca.mcgill.ecse.carshop.model.BookableService;
import ca.mcgill.ecse.carshop.model.Business;
import ca.mcgill.ecse.carshop.model.BusinessHour;
import ca.mcgill.ecse.carshop.model.BusinessHour.DayOfWeek;
import ca.mcgill.ecse.carshop.model.CarShop;
import ca.mcgill.ecse.carshop.model.Customer;
import ca.mcgill.ecse.carshop.model.Garage;
import ca.mcgill.ecse.carshop.model.Owner;
import ca.mcgill.ecse.carshop.model.Service;
import ca.mcgill.ecse.carshop.model.ServiceBooking;
import ca.mcgill.ecse.carshop.model.Technician;
import ca.mcgill.ecse.carshop.model.Technician.TechnicianType;
import ca.mcgill.ecse.carshop.model.TimeSlot;
import ca.mcgill.ecse.carshop.persistence.CarshopPersistence;

class CarShopApplicationTest {

	private static String filename = "test.carshop";

	@BeforeAll
	public static void setUpOnce() {
		CarshopPersistence.setFilename(filename);
	}

	@BeforeEach
	public void setUp() {
		// remove test file
		File f = new File(filename);
		f.delete();

		// clear all data
		CarShop shop = CarShopApplication.getCarShop();
		shop.delete();
	}

	@Test
	public void testPersistence() {
		CarShop shop = CarShopApplication.getCarShop();
		BusinessHour[] hours = {
				new BusinessHour(DayOfWeek.Monday, Time.valueOf("08:00:00"), Time.valueOf("20:00:00"), shop),
				new BusinessHour(DayOfWeek.Tuesday, Time.valueOf("08:00:00"), Time.valueOf("20:00:00"), shop),
				new BusinessHour(DayOfWeek.Wednesday, Time.valueOf("08:00:00"), Time.valueOf("20:00:00"), shop),
				new BusinessHour(DayOfWeek.Thursday, Time.valueOf("08:00:00"), Time.valueOf("20:00:00"), shop),
				new BusinessHour(DayOfWeek.Friday, Time.valueOf("08:00:00"), Time.valueOf("20:00:00"), shop), };

		Owner owner = new Owner("owner", "owner", shop);
		Technician tech = new Technician("tires", "tires", TechnicianType.Tire, shop);
		Garage garage = new Garage(shop, tech);
		Customer cust = new Customer("aziz", "pass", shop);
		Business business = new Business("CarShop", "123 Avenue Jon, CA, USA", "123-456-7890", "carshop@carshop.com",
				shop);

		for (BusinessHour businessHour : hours) {
			garage.addBusinessHour(businessHour);
			business.addBusinessHour(businessHour);
		}

		Service service = new Service("Tire Change", shop, 20, garage);
		Appointment app = new Appointment(cust, service, shop);
		TimeSlot time = new TimeSlot(Date.valueOf("2021-03-20"), Time.valueOf("08:00:00"), Date.valueOf("2021-03-20"),
				Time.valueOf("08:20:00"), shop);
		ServiceBooking booking = new ServiceBooking(service, time, app);

		CarshopPersistence.save(shop);

		CarShop shop2 = CarshopPersistence.load();
		checkSameCarShop(shop, shop2);
	}

	private void checkSameCarShop(CarShop shop, CarShop shop2) {
		assertEquals(shop.getHours().size(), shop2.getHours().size());
		for (int i = 0; i < shop.getHours().size(); i++) {
			assertEquals(shop.getHour(i).getDayOfWeek(), shop2.getHour(i).getDayOfWeek());
			assertEquals(shop.getHour(i).getStartTime(), shop2.getHour(i).getStartTime());
			assertEquals(shop.getHour(i).getEndTime(), shop2.getHour(i).getEndTime());
		}

		assertEquals(shop.hasOwner(), shop2.hasOwner());
		assertEquals(shop.getOwner().getUsername(), shop2.getOwner().getUsername());
		assertEquals(shop.getOwner().getPassword(), shop2.getOwner().getPassword());

//		assertEquals();

		assertEquals(shop.getTechnicians().size(), shop2.getTechnicians().size());
		assertEquals(shop.getTechnician(0).getUsername(), shop2.getTechnician(0).getUsername());
		assertEquals(shop.getTechnician(0).getPassword(), shop2.getTechnician(0).getPassword());

		assertEquals(shop.getAppointment(0).getBookableService().getName(),
				shop2.getAppointment(0).getBookableService().getName());
	}

	@Test
	public void testPersistenceReinitialization() {
		CarShop shop = CarShopApplication.getCarShop();
		BusinessHour[] hours = {
				new BusinessHour(DayOfWeek.Monday, Time.valueOf("08:00:00"), Time.valueOf("20:00:00"), shop),
				new BusinessHour(DayOfWeek.Tuesday, Time.valueOf("08:00:00"), Time.valueOf("20:00:00"), shop),
				new BusinessHour(DayOfWeek.Wednesday, Time.valueOf("08:00:00"), Time.valueOf("20:00:00"), shop),
				new BusinessHour(DayOfWeek.Thursday, Time.valueOf("08:00:00"), Time.valueOf("20:00:00"), shop),
				new BusinessHour(DayOfWeek.Friday, Time.valueOf("08:00:00"), Time.valueOf("20:00:00"), shop), };

		Owner owner = new Owner("owner", "owner", shop);
		Technician tech = new Technician("tires", "tires", TechnicianType.Tire, shop);
		Garage garage = new Garage(shop, tech);
		Customer cust = new Customer("aziz", "pass", shop);
		Business business = new Business("CarShop", "123 Avenue Jon, CA, USA", "123-456-7890", "carshop@carshop.com",
				shop);

		for (BusinessHour businessHour : hours) {
			garage.addBusinessHour(businessHour);
			business.addBusinessHour(businessHour);
		}

		Service service = new Service("Tire Change", shop, 20, garage);
		Appointment app = new Appointment(cust, service, shop);
		TimeSlot time = new TimeSlot(Date.valueOf("2021-03-20"), Time.valueOf("08:00:00"), Date.valueOf("2021-03-20"),
				Time.valueOf("08:20:00"), shop);
		ServiceBooking booking = new ServiceBooking(service, time, app);

		CarshopPersistence.save(shop);

		shop.delete();
		shop.reinitialize();
		checkEmpty(shop);

		shop = CarshopPersistence.load();
		checkSameCarShop(shop, hours, owner, tech, garage, cust, business, service);

		String error = null;
		try {
			shop.addCustomer("aziz", "word");
		} catch (RuntimeException e) {
			error = e.getMessage();
		}
		assertEquals(
				"Cannot create due to duplicate username. See http://manual.umple.org?RE003ViolationofUniqueness.html",
				error);

		error = null;
		try {
			shop.addBookableService(new Service("Tire Change", shop, 25, garage));
		} catch (RuntimeException e) {
			error = e.getMessage();
		}
		// check error
		assertEquals("Cannot create due to duplicate name. See http://manual.umple.org?RE003ViolationofUniqueness.html",
				error);
	}

	private void checkSameCarShop(CarShop shop, BusinessHour[] hours, Owner owner, Technician tech, Garage garage,
			Customer cust, Business business, Service service) {
		for (int i = 0; i < shop.getHours().size(); i++) {
			assertEquals(shop.getHour(i).getDayOfWeek(), hours[i].getDayOfWeek());
			assertEquals(shop.getHour(i).getStartTime(), hours[i].getStartTime());
			assertEquals(shop.getHour(i).getEndTime(), hours[i].getEndTime());
		}

		assertEquals(shop.hasOwner(), owner != null);
		assertEquals(shop.getOwner().getUsername(), owner.getUsername());
		assertEquals(shop.getOwner().getPassword(), owner.getPassword());

		assertEquals(shop.getTechnicians().size(), 1);
		assertEquals(shop.getTechnician(0).getUsername(), tech.getUsername());
		assertEquals(shop.getTechnician(0).getPassword(), tech.getPassword());

		assertEquals(shop.getGarages().size(), 1);
		assertEquals(shop.getGarage(0).getTechnician().getUsername(), tech.getUsername());
		assertEquals(shop.getGarage(0).getTechnician().getUsername(), tech.getPassword());

		assertEquals(shop.getCustomers().size(), 1);
		assertEquals(shop.getCustomer(0).getUsername(), cust.getUsername());
		assertEquals(shop.getCustomer(0).getPassword(), cust.getPassword());

		assertEquals(shop.getBusiness().getAddress(), business.getAddress());
		assertEquals(shop.getBusiness().getPhoneNumber(), business.getPhoneNumber());
		assertEquals(shop.getBusiness().getEmail(), business.getEmail());
		assertEquals(shop.getBusiness().getName(), business.getName());

		assertEquals(shop.getBookableServices().size(), 1);
		assertEquals(shop.getBookableService(0).getName(), service.getName());

	}

	private void checkEmpty(CarShop shop) {
		assertEquals(0, shop.getBookableServices().size());
		assertEquals(0, shop.getAppointments().size());
		assertEquals(0, shop.getCustomers().size());
		assertEquals(0, shop.getTechnicians().size());
		assertFalse(shop.hasOwner());
		assertFalse(shop.hasBusiness());
		assertFalse(shop.hasAppointments());
		assertFalse(shop.hasHours());
	}

}
