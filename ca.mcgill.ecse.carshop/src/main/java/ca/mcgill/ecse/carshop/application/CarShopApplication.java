
/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package ca.mcgill.ecse.carshop.application;

import ca.mcgill.ecse.carshop.model.CarShop;
import ca.mcgill.ecse.carshop.model.ServiceCombo;
import ca.mcgill.ecse.carshop.model.User;
import ca.mcgill.ecse.carshop.controller.CarShopController;
import ca.mcgill.ecse.carshop.model.Appointment;
import ca.mcgill.ecse.carshop.model.BookableService;
import ca.mcgill.ecse.carshop.model.Customer;
import ca.mcgill.ecse.carshop.model.Garage;
import ca.mcgill.ecse.carshop.model.Owner;
import ca.mcgill.ecse.carshop.model.Service;
import ca.mcgill.ecse.carshop.model.ServiceBooking;
import ca.mcgill.ecse.carshop.model.ServiceCombo;
import ca.mcgill.ecse.carshop.model.Technician;
import ca.mcgill.ecse.carshop.model.TimeSlot;
import ca.mcgill.ecse.carshop.model.User;
import ca.mcgill.ecse.carshop.model.BusinessHour.DayOfWeek;
import ca.mcgill.ecse.carshop.persistence.CarshopPersistence;
import ca.mcgill.ecse.carshop.controller.CarShopController;
import ca.mcgill.ecse.carshop.controller.InvalidInputException;
import ca.mcgill.ecse.carshop.model.Appointment;
import ca.mcgill.ecse.carshop.model.BookableService;
import ca.mcgill.ecse.carshop.model.BusinessHour;

import java.sql.Time;
import java.util.ArrayList;
import java.util.List;

public class CarShopApplication {
	

	private static CarShop carShop;
	private static User currentUser = null;
	private static String systemDate;
	private static List<List<Object>> bookingTimes = new ArrayList<List<Object>>();
	private static Appointment curAppointment=null;


	public String getGreeting() {
		return "Hello World!";
	}


	public static void main(String[] args) throws Exception {

		setSystemDate("2021-02-19+9:30");
		Technician tireTech = new Technician("Tire-Technician", "pass1", Technician.TechnicianType.Tire, getCarShop());
		CarshopPersistence.save(getCarShop());
		
		System.out.println("------Setting up System----------");
		CarShop carshop = getCarShop();
//		Owner owner = new Owner("owner", "owner", carshop);


		CarShopController.userLogin("aly", "aly");
		System.out.println("\nAn appointment was created for user customer1:\n");
		Customer customer1 = new Customer("customer1", "pass1", carshop);
		BookableService servicee = BookableService.getWithName("updatedEngine-check");
		Appointment a = new Appointment(customer1, servicee, carshop);
		ServiceBooking sb = new ServiceBooking((Service) Service.getWithName("updatedEngine-check"), new TimeSlot(CarShopController.stringToDate("2021-02-20"),CarShopController.StringToTime("9:40"), CarShopController.stringToDate("2021-02-20"), CarShopController.StringToTime("10:00"), carshop), a);
		setSystemDate("2021-02-19");
		carshop.getBusiness().addBusinessHour(setupBusinessHour("Thursday"  ,"9:00"      , "17:00"));
		CarShopController.userLogin("aly", "aly");
		CarShopController.makeAppointment("aly", "2021-02-25", "engine-check", null, "10:30");

		
		System.out.println("Customers:" + carshop.getCustomer(0).getUsername());
		
		CarShopController.userLogin("owner", "owner");

		System.out.println("Owner: " + carshop.getOwner().getUsername());
		System.out.println("Bookable Services: " + carshop.getBookableServices());
		//System.out.println("Current User: " + getCurrentUser().getUsername());
		System.out.println("Garages: " + carshop.getGarages());


		System.out.println("\n------Owner Perspective----------");
		//---------Business-------------

		System.out.println("\nCurrent User: " + getCurrentUser().getUsername() + ", Owner: " + carshop.getOwner().getUsername());
		CarShopController.SetUpBusinessInformation("carshop", "Montreal", "4389924014", "carshopapp@carshop.ca"); 	


		System.out.println("\nOwner trying to create a business:");
		System.out.println("Business created: " + carshop.getBusiness().getName() + " Address: " + carshop.getBusiness().getAddress() + " Phone: " + carshop.getBusiness().getPhoneNumber() + " email: "+ carshop.getBusiness().getEmail());




		//---------Technicians----------
		//Technician tireTech = new Technician("Tire-Technician", "pass1", Technician.TechnicianType.Tire, carshop);
		Technician engTech = new Technician("Engine-Technician ", "pass2", Technician.TechnicianType.Engine, carshop);
		Technician transTech = new Technician("Transmission-Technician", "pass3", Technician.TechnicianType.Transmission, carshop);
		carshop.addTechnician(tireTech);
		carshop.addTechnician(engTech);
		carshop.addTechnician(transTech);




		//----------Garages------------
		Garage tireG = new Garage(carshop, tireTech);
		Garage engG = new Garage(carshop, engTech);
		Garage transG = new Garage(carshop, transTech);
		carshop.addGarage(tireG);
		carshop.addGarage(engG);
		carshop.addGarage(transG);



		System.out.println("\nOwner adds 3 services: tire-change, transimission-check, engine-check");
		CarShopController.addService(carshop, getCurrentUser().getUsername() , "tire-change" , "120", "Tire");
		CarShopController.addService(carshop, getCurrentUser().getUsername() , "engine-check" , "60", "Engine");
		CarShopController.addService(carshop, getCurrentUser().getUsername() , "transmission-check" , "75", "Transmission");



		System.out.print("Services: ");
		for(BookableService serv: carshop.getBookableServices()) {
			if(serv instanceof Service) {
				System.out.print(serv.getName() + " ");
			}
		}



		System.out.println("\n\nOwner tries creating a ServiceCombo named engine-basic-check:");
		CarShopController.DefineServiceCombo(carshop, getCurrentUser().getUsername(), "engine-check-basic", "engine-check", "engine-check,transmission-check", "true,false");

		System.out.println("Service Combos in the system: ");
		for(BookableService serv: carshop.getBookableServices()) {
			if(serv instanceof ServiceCombo) {
				ServiceCombo combo = (ServiceCombo) serv;
				System.out.print(serv.getName() + ":" );
				for(int i=0;i<combo.getServices().size();i++) {
					System.out.print(" "+combo.getServices().get(i).getService().getName().toString());
				}
			}
		}

		System.out.println("\n\nOwner adds Garage hours:");
		try {
			CarShopController.addGarageHours(BusinessHour.DayOfWeek.valueOf("Monday"), CarShopController.StringToTime("9:00"), CarShopController.StringToTime("11:00"), tireTech);
		} catch(InvalidInputException e) {
			System.out.println( e.getMessage() + ". Could not add Garage business hour as the corresponding technician is not logged in");		
		}


		//		CarShopController.UpdateBusinessHours(BusinessHour.DayOfWeek.valueOf("Friday"), CarShopController.StringToTime("9:00"), BusinessHour.DayOfWeek.valueOf("Monday"), CarShopController.StringToTime("8:00"), CarShopController.StringToTime("16:00"));
		System.out.println("\nOwner tries to update the service engine-check and the service combo engine-check-basic");
		CarShopController.updateService(carshop, getCurrentUser().getUsername(), "engine-check", "updatedEngine-check", "20", "Engine");
		CarShopController.updateServiceCombo(carshop, getCurrentUser().getUsername(), "engine-check-basic", "updatedEngine-check-basic", "updatedEngine-check","updatedEngine-check,transmission-check", "true,false");

		Service service = (Service) Service.getWithName("updatedEngine-check");
		ServiceCombo combo = (ServiceCombo) ServiceCombo.getWithName("updatedEngine-check-basic");

		System.out.println("Updated service: " + Service.getWithName("updatedEngine-check").getName() + " duration: " + service.getDuration());
		System.out.println("Updated service combo: " + Service.getWithName("updatedEngine-check-basic").getName() + " main service: " + combo.getMainService().getService().getName());

		setSystemDate("2021-02-20");
		System.out.println("\nOwner trying to make an appointment");
		try {
			CarShopController.makeAppointment(getCurrentUser().getUsername(), "2021-02-22", "updatedEngineCheck", "transmission-check", "9:40");
		}
		catch(Exception e) {
			System.out.println(e.getMessage());
		}



		System.out.println("\nAn appointment was created for user customer1:\n");
//		Customer customer1 = new Customer("customer1", "pass1", carshop);
//		BookableService serv = BookableService.getWithName("updatedEngine-check");
//		Appointment a = new Appointment(customer1, serv, carshop);
//		ServiceBooking sb = new ServiceBooking((Service) Service.getWithName("updatedEngine-check"), new TimeSlot(CarShopController.stringToDate("2021-02-20"),CarShopController.StringToTime("9:40"), CarShopController.stringToDate("2021-02-20"), CarShopController.StringToTime("10:00"), carshop), a);


		setSystemDate("2021-02-20+9:30");
		System.out.println("Try to start appointment before its time");
		try {
			CarShopController.startAppointment(getSystemDate(), getCurrentUser().getUsername());
		}
		catch(Exception e) {
			System.out.println(e.getMessage() + "\n");
		}



		setSystemDate("2021-02-20+9:40");
		System.out.println("Try to start appointment at its starting time");
		CarShopController.startAppointment(getSystemDate(), getCurrentUser().getUsername());   	
		System.out.println("The appointment status is: " + a.getAppointmentStatusFullName() + "\n");



		setSystemDate("2021-02-20+9:50");
		System.out.println("Try to end appointment before its time");
		try {
			CarShopController.endAppointment(getSystemDate());
		}
		catch(Exception e) {
			System.out.println(e.getMessage()+"\n");
		}



		setSystemDate("2021-02-20+10:00");
		System.out.println("Try to end appointment at its time");
		try {
			CarShopController.endAppointment(getSystemDate());
			System.out.println("The appointment status is: " + a.getAppointmentStatusFullName());
		}
		catch(Exception e) {
			System.out.println(e.getMessage());

		}


		System.out.println("\nTry to delete a service combo: bonus feature");
		System.out.println("Service combos in the system: " + ServiceCombo.getWithName("updatedEngine-check-basic").getName());
		CarShopController.deleteServiceCombo(carshop, "updatedEngine-check-basic", getCurrentUser().getUsername());

		System.out.print("Service combos in the system after deletion: ");
		for(BookableService bs: carshop.getBookableServices()) {
			if(bs instanceof ServiceCombo) {
				System.out.println(bs.getName());
			}
		}

		System.out.println("\n\nDelete a customer's account: bonus feature");
		System.out.println("customer account: " + Customer.getWithUsername("customer1").getUsername());
		CarShopController.deleteCustomer("customer1", getCurrentUser().getUsername());
		try {
			System.out.println("customer account: " + Customer.getWithUsername("customer1").getUsername());
		}
		catch(Exception e) {
			System.out.println("Customer account: This customer account doesn't exist");
		}


		System.out.println("\nSign out: bonus feature");
		System.out.println("current user: " + getCurrentUser().getUsername());
		CarShopController.signOut();
		if(getCurrentUser()==null) {
			System.out.println("Current user: no one is signed in");
		}
		else {
			System.out.println("Current user: " + getCurrentUser().getUsername());
		}



	}

	/**
	 * @author Abd-El-Aziz Zayed
	 * @return the carshop, create it if it does not exists
	 */
	public static CarShop getCarShop() {

		if (carShop == null) {
			carShop = CarshopPersistence.load();
		}

		return carShop;
	}

	/**
	 * Author Simo Benkirane
	 * @return
	 */
	public static User getCurrentUser() {
		return currentUser;
	}

	/**
	 * Author Simo Benkirane
	 * @return
	 */
	public static void setCurrentUser(User user) {
		currentUser = user;
	}

	/**
	 * Author Alexandre and Aly and Abe
	 * @return
	 */
	public static Appointment getCurrentAppointment() {
		return curAppointment;
	}

	/**
	 * Author Alexandre and Aly and Abe
	 * @return
	 */
	public static void setCurAppointment(Appointment app) {
		curAppointment = app;
	}


	//Abe

	public static String getSystemDate() {
		return systemDate;
	}

	public static String setSystemDate(String systemDate) {
		CarShopApplication.systemDate = systemDate;
		CarshopPersistence.save(CarShopApplication.getCarShop());
		return systemDate;
	}

	public static List<List<Object>> getBookingTimes() {
		return bookingTimes;
	}

	public static void setBookingTimes(List<List<Object>> bookingTimes) {
		CarShopApplication.bookingTimes = bookingTimes;
	}

	public static Time GetStartTimeOfWeirdFormat(String string) {

		String hours = "";
		String minutes = "";
		hours += string.charAt(11);
		hours += string.charAt(12);
		minutes += string.charAt(14);
		minutes += string.charAt(15);

		@SuppressWarnings("deprecation")
		Time time = new java.sql.Time(Integer.parseInt(hours), Integer.parseInt(minutes), 0);


		return time;

	}

	public static BusinessHour setupBusinessHour(String dayStr, String startStr, String endStr) {
		DayOfWeek day = DayOfWeek.valueOf(dayStr);
		Time start = Time.valueOf(startStr + ":00");
		Time end = Time.valueOf(endStr + ":00");

		return new BusinessHour(day, start, end, carShop);
	}
}